@{
  Layout = "~/Views/Shared/_Login.cshtml";
}
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<!------ Include the above in your HEAD tag ---------->
<style>
  .pass_show {
    position: relative
  }

  .pass_show .ptxt {

    position: absolute;

    top: 50%;

    right: 10px;

    z-index: 1;

    color: #f36c01;

    margin-top: -10px;

    cursor: pointer;

    transition: .3s ease all;

  }

  .pass_show .ptxt:hover {
    color: #333333;
  }

  .box {
    flex-wrap: nowrap;
    justify-content: center;
  }

  .reset-paasword .box {
    padding: 24px 0;
  }

  .reset-paasword .box .col-sm-7 {
    padding: 16px;
    box-shadow: 0 3px 5px -2px rgba(0, 0, 0, .2), 0 4px 4px 0 rgba(0, 0, 0, .14), 0 1px 5px 0 rgba(0, 0, 0, .12);
  }

  .reset-paasword .box .col-sm-4 {
    margin-left: 40px;
    padding: 16px;
    box-shadow: 0 3px 5px -2px rgba(0, 0, 0, .2), 0 4px 4px 0 rgba(0, 0, 0, .14), 0 1px 5px 0 rgba(0, 0, 0, .12);
  }

  .reset-paasword .box .col-sm-7 h2 {
    margin-bottom: 30px;
  }

  .reset-paasword .box .word-count {
    font-size: 14px;
    margin-right: 6px;
    margin-left: auto;
    text-align: right;
    margin-bottom: 5px;
    margin-top: -9px;
  }

  .valid {
    border: 3px solid green;
  }

  .invalid {
    border: 2px solid red;
  }
</style>
<div class="container reset-paasword">
  <div class="row box">
    <div class="col-sm-7">
      <h2>IB GRIM Reset Password</h2>

      <label>Current Password</label>
      <div class="form-group pass_show">
        <input type="password" id="old_password" value="" class="form-control" placeholder="Current Password">
      </div>
      <label>New Password</label>
      <div class="form-group pass_show">
        <input type="password" id="new_password" autocomplete="false" maxlength="16" value="" class="form-control"
          placeholder="New Password">
      </div>
      <p class="word-count" id="word-count1">0 / 16</p>
      <label>Confirm Password</label>
      <div class="form-group pass_show">
        <input type="password" id="confirm_password" autocomplete="false" maxlength="16" value="" class="form-control"
          placeholder="Confirm Password">
      </div>
      <p class="word-count" id="word-count2">0 / 16</p>
      <div class="form-group"> <Button type="button" class="form-control btn btn-primary" disabled
          id="ResetPassword_btn" onclick="ResetPassword()">Reset Password</Button></div>
      <span id="validationMessage" style="color: red;"></span>
    </div>
    <div class="col-sm-4">
      <h4><strong>Password policies</strong></h4>
      <p>The password must contain at least:</p>
      <ul>
        <li>1 uppercase letter, 1 lowercase Letter</li>
        <li>1 number</li>
        <li>one special character (E.g. , . _ & ? etc)</li>
        <li>and min of 8 and max of 16 characters</li>
      </ul>
    </div>
  </div>

</div>
<div class="spinnerbody" id="spinnerbody">
  <div class="spinnerchild">
    <div class="spinner-border text-success " role="status">
      <span class="sr-only"></span>
    </div>
    <span>Loading....</span>
  </div>
</div>
<script>
  window.ApiUrl1 = '@Model.ApiUrl1';
  window.ApiUrl2 = '@Model.ApiUrl2';
  window.BaseUrl = '@Model.BaseUrl';
  window.Port1 = '@Model.Port1';
  window.Port2 = '@Model.Port2';
  window.Endpoint1 = '@Model.Endpoint1';
  window.Endpoint2 = '@Model.Endpoint2';
</script>
<script>

  var host = window.BaseUrl + window.Port1;
  var host1 = window.BaseUrl + window.Port2;
  var path = window.Endpoint1;

  $(document).ready(function () {
    $('.pass_show').append('<span class="ptxt">Show</span>');
    var user_details1 = JSON.parse(
      localStorage.getItem("user_reset_details")
    );
    $("#old_password").val(user_details1[0].password);
  });

  $(document).on('click', '.pass_show .ptxt', function () {

    $(this).text($(this).text() == "Show" ? "Hide" : "Show");

    $(this).prev().attr('type', function (index, attr) { return attr == 'password' ? 'text' : 'password'; });

  });


  function ResetPassword() {
    if (validator()) {
      var user_details = JSON.parse(
        localStorage.getItem("user_reset_details")
      );
      var validationMessage = $("#validationMessage");
      validationMessage.text("");
      if ($('#old_password').val().trim() == user_details[0].password) {
        var editedUserRequestObj = {
          user_id: user_details[0].id,
          old_password: $('#old_password').val().trim(),
          new_password: $('#new_password').val().trim(),
        };
        debugger;
        $.ajax({
          url: host + path + "reset_password",
          method: "PUT",
          contentType: "application/json;charset=UTF-8",
          data: JSON.stringify(editedUserRequestObj),
          success: function (response) {
            //toast("success", "success update pass");
            debugger;
            Login_method();
          },
          error: function (xhr, status, error) {
            console.log("Error: " + error);
            toast("error", "Network error. Please try again later.");
          },
          complete: function (xhr, status) {
            if (status === "error" || !xhr.responseText) {
              toast("error", "Network error. Please try again later.");
            }
          },
        });
      } else {
        validationMessage.text("Your old password appear to be incorrect.");
      }
    }
  }

  function validator() {
    var valid = true;
    var old_password = $('#old_password').val().trim();
    var old_password_body = $('#old_password');
    var new_password = $('#new_password');
    var confirm_password = $('#confirm_password');
    var validationMessage = $("#validationMessage");

    validationMessage.text("");

    if (old_password === "") {
      validationMessage.text("Old Password fields cannot be empty.");
      valid = false;
    } else if (new_password.val() === "" || confirm_password.val() === "") {
      validationMessage.text("Password fields cannot be empty.");
      valid = false;
    } else if (new_password.val().length > 16 || new_password.val().length < 8) {
      validationMessage.text("New Password length must be between 8 and 16 characters.");
      valid = false;
    } else if (!validatePassword(new_password.val())) {
      //validationMessage.text("The password must contain at least: 1 uppercase letter, 1 lowercase letter, 1 number, and one special character (E.g. , . _ & ? etc)");
      valid = false;
    } else if (new_password.val() !== confirm_password.val()) {
      valid = false;
      validationMessage.text("The password confirmation does not match");
    }

    // Add or remove classes based on validation result
    new_password.toggleClass("invalid", !valid);
    confirm_password.toggleClass("invalid", !valid);
    //old_password_body.toggleClass("invalid", !valid);
    new_password.toggleClass("valid", valid);
    confirm_password.toggleClass("valid", valid);
    //old_password_body.toggleClass("valid", valid);

    $("#ResetPassword_btn").prop('disabled', !valid);

    return valid;
  }

  function validatePassword(password) {
    var uppercaseRegex = /[A-Z]/;
    var lowercaseRegex = /[a-z]/;
    var numberRegex = /[0-9]/;
    var specialCharRegex = /[!@@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]+/;

    return (
      uppercaseRegex.test(password) &&
      lowercaseRegex.test(password) &&
      numberRegex.test(password) &&
      specialCharRegex.test(password)
    );
  }

  $(document).on("input", "#new_password", function () {
    const currentLength = $(this).val().length;
    const wordCountElement = $("#word-count1");
    wordCountElement.html(`${currentLength} / 16`);
    var valid = true;
    var new_password = $('#new_password');
    var validationMessage = $("#validationMessage");
    validationMessage.text("");

    if (new_password.val() === "") {
      validationMessage.text("New Password fields cannot be empty.");
      valid = false;
    } else if (new_password.val().length > 16 || new_password.val().length < 8) {
      valid = false;
      validationMessage.text("New Password length must be between 8 and 16 characters.");
    } else if (!validatePassword(new_password.val())) {
      valid = false;
      //validationMessage.text("The password must contain at least: 1 uppercase letter, 1 lowercase letter, 1 number, and one special character (E.g. , . _ & ? etc)");
    }

    // Add or remove classes based on validation result
    new_password.toggleClass("invalid", !valid);
    new_password.toggleClass("valid", valid);
    $("#ResetPassword_btn").prop('disabled', !valid);
  });

  $(document).on("input", "#confirm_password", function () {
    const currentLength = $(this).val().length;
    const wordCountElement = $("#word-count2");
    var valid = true;
    wordCountElement.html(`${currentLength} / 16`);
    var confirm_password = $('#confirm_password');
    var new_password = $('#new_password');
    var validationMessage = $("#validationMessage");
    validationMessage.text("");


    if (confirm_password.val() === "") {
      valid = false;
      validationMessage.text("Password fields cannot be empty.");
    } else if (confirm_password.val().length > 16 || confirm_password.val().length < 8) {
      valid = false;
      validationMessage.text("Confirm Password length must be between 8 and 16 characters.");
    } else if (!validatePassword(confirm_password.val())) {
      valid = false;
      //validationMessage.text("The password must contain at least: 1 uppercase letter, 1 lowercase letter, 1 number, and one special character (E.g. , . _ & ? etc)");
    } else if (new_password.val() !== confirm_password.val()) {
      valid = false;
      validationMessage.text("The password confirmation does not match");
    }

    // Add or remove classes based on validation result
    confirm_password.toggleClass("invalid", !valid);
    confirm_password.toggleClass("valid", valid);
    $("#ResetPassword_btn").prop('disabled', !valid);
  });

  $(document).on("input", "#old_password", function () {
    var old_password = $('#old_password').val().trim();
    var old_password_body = $('#old_password');
    var validationMessage = $("#validationMessage");
    validationMessage.text("");
    var valid = true;

    if (old_password === "") {
      valid = false;
      validationMessage.text("Old Password fields cannot be empty.");
    }
    // Add or remove classes based on validation result
    old_password_body.toggleClass("invalid", !valid);
    old_password_body.toggleClass("valid", valid);
    $("#ResetPassword_btn").prop('disabled', !valid);
  });

  function Login_method() {
    var user_details = JSON.parse(
      localStorage.getItem("user_reset_details")
    );

    spinner(true);
    // Make AJAX request to the server
    debugger;
    $.ajax({
      url: host + path + "login",
      method: "POST",
      dataType: "json",
      data: {
        email: user_details[0].email,
        password: $("#new_password").val().trim(),
      },
      success: function (response) {
        debugger;
        if (response.success === true) {
          localStorage.removeItem("user_reset_details");
          localStorage.setItem("user_info", JSON.stringify(response));
          spinner(false);
          toastlogin("success", "Password Updated Successfully");
          setTimeout(() => {
            if (
              response.user[0].role_id == 2 ||
              response.user[0].role_id == 7 ||
              response.user[0].role_id == 8 ||
              response.user[0].role_id == 9 ||
              response.user[0].role_id == 19
            ) {
              localStorage.setItem("sidemenu", "MyRequests");
              window.location.href = "/Home/MyRequests";
            } else if (response.user[0].role_id == 3) {
              window.location.href = "/Home/NewIndent";
            } else if (response.user[0].role_id == 5) {
              localStorage.setItem("sidemenu", "MyRequests");
              window.location.href = "/Home/NewIndent";
            } else if (response.user[0].role_id == 6) {
              localStorage.setItem("sidemenu", "MyRequests");
              window.location.href = "/Home/NewIndent";
            } else if (response.user[0].role_id == 11) {
              localStorage.setItem("sidemenu", "Report");
              window.location.href = "/Home/Report";
            } else if (response.user[0].role_id == 12) {
              localStorage.setItem("sidemenu", "Pr_materials");
              window.location.href = "/Home/Pr_materials";
            } else {
              //alert("this role page not");
              window.location.href = "/Home/Report";
              localStorage.setItem("sidemenu", "Report");
            }
          }, 1000);
        }
      },

      error: function (xhr, status, error) {
        spinner(false);
        // Handle login error
        console.log("Error: " + error);
        // alert("Login failed. Please try again.");
        toast("warning", "Login failed. Please try again.");
      },

      complete: function (xhr, status) {
        spinner(false);
        if (status === "error" || !xhr.responseText) {
          toast("error", "Network error. Please try again later.");
        }
      },
    });
  }

  function spinner(isloading) {
    if (isloading == true) {
      document.getElementById("spinnerbody").style.display = "block";
    } else {
      document.getElementById("spinnerbody").style.display = none;
    }
  }

  function toast(action, msg) {
    toastr.options = {
      closeButton: true,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: true,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    };
    Command: toastr[action](msg);
  }

</script>